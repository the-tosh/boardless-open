// Generated by CoffeeScript 1.9.1
(function() {
  var ItemToken, NpcToken, PlayerToken, PlayfieldToken,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.board.PlayfieldTokenFactory = function(type, attrs) {
    var TYPE_TO_CLASS;
    TYPE_TO_CLASS = {
      'item': ItemToken,
      'npc': NpcToken,
      'player': PlayerToken
    };
    return new TYPE_TO_CLASS[type](attrs);
  };

  PlayfieldToken = (function() {
    function PlayfieldToken(arg) {
      this.id = arg.id, this.title = arg.title, this.img_url = arg.img_url, this.point = arg.point, this.is_stored = arg.is_stored;
      this.after_creation = bind(this.after_creation, this);
      this.do_binds = bind(this.do_binds, this);
      this.enable_dragging = bind(this.enable_dragging, this);
      this.double_click_handler = bind(this.double_click_handler, this);
      this.render = bind(this.render, this);
      this.set_db_id = bind(this.set_db_id, this);
      this.kill = bind(this.kill, this);
      this.delete_elem = bind(this.delete_elem, this);
      this.save_point_to_db = bind(this.save_point_to_db, this);
      this.move_to = bind(this.move_to, this);
      this.save_general_data_to_db = bind(this.save_general_data_to_db, this);
      this.update_general_data = bind(this.update_general_data, this);
      this.apply_changes = bind(this.apply_changes, this);
      this.get_element = bind(this.get_element, this);
      this.get_element_id = bind(this.get_element_id, this);
      this.get_image = bind(this.get_image, this);
      this.last_click_time = null;
      this.changes = {};
      this.prev_point = new board.Point(this.point.x, this.point.y);
    }

    PlayfieldToken.prototype.get_image = function() {
      return this.img_url;
    };

    PlayfieldToken.prototype.get_element_id = function() {
      return "#js-play-object-" + this.type + "-" + this.id;
    };

    PlayfieldToken.prototype.get_element = function() {
      return $(this.get_element_id());
    };

    PlayfieldToken.prototype.apply_changes = function() {
      if (!this.is_stored) {
        return;
      }
      if (this.changes.kill) {
        this.kill();
      }
      if (this.changes.point) {
        this.save_point_to_db(this.changes.point);
      }
      return this.changes = {};
    };

    PlayfieldToken.prototype.update_general_data = function(form_data) {
      var $elem, field, i, len, results;
      $elem = this.get_element();
      results = [];
      for (i = 0, len = form_data.length; i < len; i++) {
        field = form_data[i];
        switch (field.name) {
          case 'title':
            this.title = field.value;
            results.push($elem.find('span.js-play-object-title').html(this.title));
            break;
          case 'id':
            continue;
          default:
            results.push(void 0);
        }
      }
      return results;
    };

    PlayfieldToken.prototype.save_general_data_to_db = function(form_data) {
      var clb, data, field, i, j, len, len1;
      if (!this.is_stored) {
        this.changes.general_data = [];
        for (i = 0, len = form_data.length; i < len; i++) {
          field = form_data[i];
          this.changes.general_data.push(field);
        }
      }
      data = {
        'object_type': this.type,
        'game_session_id': board.SESSION_GLOBALS.GAME_SESSION_ID
      };
      for (j = 0, len1 = form_data.length; j < len1; j++) {
        field = form_data[j];
        data[field.name] = field.value;
      }
      clb = (function(_this) {
        return function(result) {
          if (result.success) {
            return console.log('Object is updated!');
          } else {
            return console.log('Form errors!');
          }
        };
      })(this);
      return board.SESSION_GLOBALS.WSCLIENT.request('UpdatePlayfieldToken', data, clb);
    };

    PlayfieldToken.prototype.move_to = function(point) {
      var $elem;
      $elem = this.get_element();
      $elem.css({
        'left': point.x,
        'top': point.y
      });
      return this.point = new board.Point(point.x, point.y);
    };

    PlayfieldToken.prototype.save_point_to_db = function(point) {
      var clb, data;
      if (!this.is_stored) {
        this.changes.point = new board.Point(point.x, point.y);
        return;
      }
      data = {
        'game_session_id': board.SESSION_GLOBALS.GAME_SESSION_ID,
        'object_id': this.id,
        'x': point.x,
        'y': point.y
      };
      clb = (function(_this) {
        return function(result) {
          if (result.success) {
            return _this.prev_point = new board.Point(_this.point.x, _this.point.y);
          } else {
            console.log('Form errors!');
            return _this.move_to(_this.prev_point);
          }
        };
      })(this);
      return board.SESSION_GLOBALS.WSCLIENT.request('UpdatePlayfieldTokenPoint', data, clb);
    };

    PlayfieldToken.prototype.delete_elem = function() {
      var $elem;
      $elem = this.get_element();
      return $elem.remove();
    };

    PlayfieldToken.prototype.kill = function() {
      var clb, data;
      if (!this.is_stored) {
        this.changes.kill = true;
        return;
      }
      data = {
        'game_session_id': board.SESSION_GLOBALS.GAME_SESSION_ID,
        'id': this.id
      };
      clb = (function(_this) {
        return function(result) {
          if (result.success) {
            return _this.delete_elem();
          } else {
            return console.log(result.error);
          }
        };
      })(this);
      return board.SESSION_GLOBALS.WSCLIENT.request('PlayfieldTokenDelete', data, clb);
    };

    PlayfieldToken.prototype.set_db_id = function(db_id) {
      var $elem;
      if (this.is_stored) {
        return;
      }
      $elem = this.get_element();
      this.id = db_id;
      return $elem.attr('id', "js-play-object-" + this.type + "-" + this.id);
    };

    PlayfieldToken.prototype.render = function() {
      var $obj;
      $obj = $(board.ECT.render('/static/js/templates/play/playfield_object.ect', {
        'object': this
      }));
      return $('#playfield').append($obj);
    };

    PlayfieldToken.prototype.double_click_handler = function() {
      var data;
      if (board.SESSION_GLOBALS.USER_ROLE === 'master') {
        data = {
          'object': this
        };
        return board.Popup.render_template("/play/update_" + this.type + ".ect", data, (function(_this) {
          return function() {
            $("#js-update-" + _this.type + "-form-ok-btn").bind('click', function() {
              var form_data;
              board.Popup.hide();
              form_data = $("#js-update-" + _this.type + "-container .js-update-" + _this.type + "-form").serializeArray();
              _this.update_general_data(form_data);
              return _this.save_general_data_to_db(form_data);
            });
            $("#js-update-" + _this.type + "-form-cancel-btn").bind('click', function() {
              return board.Popup.hide();
            });
            return $("#js-update-" + _this.type + "-form-delete-btn").bind('click', function() {
              board.Popup.hide();
              return _this.kill();
            });
          };
        })(this));
      }
    };

    PlayfieldToken.prototype.enable_dragging = function() {
      var element_id;
      element_id = this.get_element_id();
      return interact(element_id).draggable({
        restrict: {
          restriction: '#playfield',
          elementRect: {
            top: 0,
            left: 0,
            bottom: 1,
            right: 1
          }
        },
        onmove: (function(_this) {
          return function(e) {
            var point;
            point = new board.Point(_this.point.x + e.dx, _this.point.y + e.dy);
            return _this.move_to(point);
          };
        })(this),
        onend: (function(_this) {
          return function(e) {
            return _this.save_point_to_db(_this.point);
          };
        })(this)
      });
    };

    PlayfieldToken.prototype.do_binds = function() {
      var $elem;
      $elem = this.get_element();
      if (board.SESSION_GLOBALS.USER_ROLE === "master") {
        $elem.bind("dragstart", function(e) {
          return e.preventDefault();
        });
        this.enable_dragging();
      }
      return $elem.bind("mousedown", (function(_this) {
        return function(e) {
          if ((_this.last_click_time != null) && (Date.now() - _this.last_click_time <= 0.3 * 1000)) {
            _this.last_click_time = null;
            return _this.double_click_handler();
          } else {
            return _this.last_click_time = Date.now();
          }
        };
      })(this));
    };

    PlayfieldToken.prototype.after_creation = function(new_id) {
      this.set_db_id(new_id);
      this.enable_dragging();
      this.is_stored = true;
      return this.apply_changes();
    };

    return PlayfieldToken;

  })();

  ItemToken = (function(superClass) {
    extend(ItemToken, superClass);

    function ItemToken(arg) {
      this.id = arg.id, this.title = arg.title, this.img_url = arg.img_url, this.point = arg.point, this.item_id = arg.item_id, this.durability = arg.durability, this.is_stored = arg.is_stored;
      this.double_click_handler = bind(this.double_click_handler, this);
      this.update_general_data = bind(this.update_general_data, this);
      this.last_click_time = null;
      this.changes = {};
      this.prev_point = new board.Point(this.point.x, this.point.y);
      this.type = 'item';
    }

    ItemToken.prototype.update_general_data = function(form_data) {
      var field, i, len, results;
      ItemToken.__super__.update_general_data.call(this, form_data);
      results = [];
      for (i = 0, len = form_data.length; i < len; i++) {
        field = form_data[i];
        switch (field.name) {
          case 'durability':
            results.push(this.durability = field.value);
            break;
          default:
            results.push(void 0);
        }
      }
      return results;
    };

    ItemToken.prototype.double_click_handler = function() {
      var data;
      if (board.SESSION_GLOBALS.USER_ROLE === 'master') {
        data = {
          'object': this,
          'items': board.SESSION_GLOBALS.ITEMS
        };
        return board.Popup.render_template('/play/update_item.ect', data, (function(_this) {
          return function() {
            $('#js-update-item-form-ok-btn').bind('click', function() {
              var field, form_data, i, item, item_id, j, len, len1, ref;
              board.Popup.hide();
              form_data = $("#js-update-" + _this.type + "-container .js-update-" + _this.type + "-form").serializeArray();
              for (i = 0, len = form_data.length; i < len; i++) {
                field = form_data[i];
                if (field.name === 'item') {
                  item_id = parseInt(field.value);
                  break;
                }
              }
              ref = board.SESSION_GLOBALS.ITEMS;
              for (j = 0, len1 = ref.length; j < len1; j++) {
                item = ref[j];
                if (item.id === item_id) {
                  form_data.push({
                    'name': 'title',
                    'value': item.title
                  });
                }
              }
              _this.update_general_data(form_data);
              return _this.save_general_data_to_db(form_data);
            });
            $("#js-update-" + _this.type + "-form-cancel-btn").bind('click', function() {
              return board.Popup.hide();
            });
            return $("#js-update-" + _this.type + "-form-delete-btn").bind('click', function() {
              board.Popup.hide();
              return _this.kill();
            });
          };
        })(this));
      } else if (board.SESSION_GLOBALS.THE_PLAYER != null) {
        data = {
          'object': this
        };
        return board.Popup.render_template('/play/take_item.ect', data, (function(_this) {
          return function() {
            $('#js-take-item-form-ok-btn').bind('click', function() {
              board.Popup.hide();
              return board.SESSION_GLOBALS.THE_PLAYER.pick_up_playfield_object(_this);
            });
            return $('#js-take-item-form-cancel-btn').bind('click', function() {
              return board.Popup.hide();
            });
          };
        })(this));
      }
    };

    return ItemToken;

  })(PlayfieldToken);

  NpcToken = (function(superClass) {
    extend(NpcToken, superClass);

    function NpcToken(attrs) {
      this.type = 'npc';
      NpcToken.__super__.constructor.call(this, attrs);
    }

    return NpcToken;

  })(PlayfieldToken);

  PlayerToken = (function(superClass) {
    extend(PlayerToken, superClass);

    function PlayerToken(arg) {
      this.id = arg.id, this.title = arg.title, this.img_url = arg.img_url, this.point = arg.point, this.player_id = arg.player_id, this.is_stored = arg.is_stored;
      this.do_binds = bind(this.do_binds, this);
      this.type = 'player';
      this.changes = {};
      this.prev_point = new board.Point(this.point.x, this.point.y);
    }

    PlayerToken.prototype.do_binds = function() {
      var $elem, element_id;
      $elem = this.get_element();
      if (board.SESSION_GLOBALS.USER_ROLE === "master") {
        $elem.bind("dragstart", function(e) {
          return e.preventDefault();
        });
        element_id = this.get_element_id();
        return interact(element_id).draggable({
          restrict: {
            restriction: '#playfield',
            elementRect: {
              top: 0,
              left: 0,
              bottom: 1,
              right: 1
            }
          },
          onmove: (function(_this) {
            return function(e) {
              var point;
              point = new board.Point(_this.point.x + e.dx, _this.point.y + e.dy);
              return _this.move_to(point);
            };
          })(this),
          onend: (function(_this) {
            return function(e) {
              return _this.save_point_to_db(_this.point);
            };
          })(this)
        });
      }
    };

    return PlayerToken;

  })(PlayfieldToken);

}).call(this);

//# sourceMappingURL=playfield_tokens.js.map
