// Generated by CoffeeScript 1.9.1

/* Name Spaces */

(function() {
  window.board = {};

  board.Helpers = (function() {
    function Helpers() {}

    Helpers.prototype.has_class = function(obj, class_name) {
      var el, j, len, ref;
      if (obj != null) {
        ref = obj.className.split(' ');
        for (j = 0, len = ref.length; j < len; j++) {
          el = ref[j];
          if (el === class_name) {
            return true;
          }
        }
        return false;
      } else {
        return false;
      }
    };

    Helpers.prototype.remove_class = function(obj, cls) {
      var class_list, el, html_el, i, j, l, len, len1, len2, m;
      if (this.is_element(obj)) {
        class_list = obj.className.split(' ');
        for (i = j = 0, len = class_list.length; j < len; i = ++j) {
          el = class_list[i];
          if (el === cls) {
            class_list.splice(i, 1);
          }
        }
        obj.className = class_list.join(' ');
      } else if (obj.length > 0) {
        for (l = 0, len1 = obj.length; l < len1; l++) {
          html_el = obj[l];
          class_list = html_el.className.split(' ');
          for (i = m = 0, len2 = class_list.length; m < len2; i = ++m) {
            el = class_list[i];
            if (el === cls) {
              class_list.splice(i, 1);
            }
          }
          html_el.className = class_list.join(' ');
        }
      }
    };

    Helpers.prototype.add_class = function(obj, cls) {
      var el, j, len;
      if (this.is_element(obj)) {
        if (!this.has_class(obj, cls)) {
          obj.className += " " + cls;
        }
      } else if (obj.length > 0) {
        for (j = 0, len = obj.length; j < len; j++) {
          el = obj[j];
          if (!this.has_class(el, cls)) {
            el.className += " " + cls;
          }
        }
      }
    };

    Helpers.prototype.toggle_class = function(obj, class_name) {
      if (this.has_class(obj, class_name)) {
        this.remove_class(obj, class_name);
      } else {
        this.add_class(obj, class_name);
      }
    };

    Helpers.prototype.get_parent = function(obj, class_name) {
      var parent;
      parent = obj.parentElement;
      if (class_name != null) {
        if (parent.tagName !== "BODY") {
          if (this.has_class(parent, class_name)) {
            return parent;
          } else {
            return this.get_parent(parent, class_name);
          }
        } else {
          return false;
        }
      } else {
        return parent;
      }
    };

    Helpers.prototype.insert_after = function(obj, html) {
      return obj.parentNode.insertBefore(html, obj.nextSibling);
    };

    Helpers.prototype.is_element = function(obj) {
      if (typeof HTMLElement === "object") {
        return obj instanceof HTMLElement;
      } else {
        return obj && typeof obj === "object" && obj !== null && obj.nodeType === 1 && typeof obj.nodeName === "string";
      }
    };

    Helpers.prototype.trigger = function(obj, event, prop_obj) {
      if (prop_obj != null) {
        return obj.dispatchEvent(new CustomEvent(event, prop_obj));
      } else {
        return obj.dispatchEvent(new CustomEvent(event));
      }
    };

    Helpers.prototype.get_random_id = function() {
      return parseInt((new Date()).getTime()) + '' + parseInt(Math.random() * 100) + '' + parseInt(Math.random() * 100) + '' + parseInt(Math.random() * 100);
    };

    Helpers.prototype.set_attributes = function(obj, attr) {
      var k, v;
      for (k in attr) {
        v = attr[k];
        obj.setAttribute(k, v);
      }
      return obj;
    };

    return Helpers;

  })();

}).call(this);

//# sourceMappingURL=helpers.js.map
