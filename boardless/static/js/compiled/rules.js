// Generated by CoffeeScript 1.9.1
(function() {
  var LevelSettings,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.RulesEdit = (function() {
    function RulesEdit(rules_id, skills) {
      this.rules_id = rules_id;
      this.do_binds = bind(this.do_binds, this);
      this.do_binds();
      return;
    }

    RulesEdit.prototype.do_binds = function() {
      $('.js-toggle-item_group-attr').bind('click', (function(_this) {
        return function(e) {
          var attr_name, item_group_id;
          e.preventDefault();
          item_group_id = $(e.currentTarget).data('itemGroupId');
          attr_name = $(e.currentTarget).data('attrName');
          $.post('/api/rules/item_group/toggle_attribute', {
            rules_id: _this.rules_id,
            item_group: item_group_id,
            attr_name: attr_name
          }, (function(response) {
            if (response.success) {
              $(e.currentTarget).toggleClass('btn-grey');
              return $(e.currentTarget).toggleClass('btn-green');
            }
          }));
          return 'json';
        };
      })(this));
      return $('.js-child-change-status-btn').bind('click', (function(_this) {
        return function(e) {
          var $parent, child_id, child_type, is_disabled;
          e.preventDefault();
          $parent = $(e.currentTarget).parent().parent();
          child_id = $parent.data('child-id');
          child_type = $parent.data('child-type');
          is_disabled = parseInt($parent.data('is-disabled'));
          $.post('/api/rules/child/change_status/', {
            id: child_id,
            disable: !is_disabled,
            child_type: child_type
          }, (function(response) {
            var $btn;
            if (response.success) {
              $btn = $parent.find('.js-child-change-status-btn:first');
              switch (child_type) {
                case "item":
                  if (is_disabled) {
                    $btn.removeClass('btn-grey');
                    $btn.addClass('btn-green');
                    $btn.removeClass('icon-add');
                    $btn.addClass('icon-added');
                    return $parent.data('is-disabled', 0);
                  } else {
                    $btn.removeClass('btn-green');
                    $btn.addClass('btn-grey');
                    $btn.removeClass('icon-added');
                    $btn.addClass('icon-add');
                    return $parent.data('is-disabled', 1);
                  }
                  break;
                default:
                  if (is_disabled) {
                    $btn.html('Disable');
                    return $parent.data('is-disabled', 0);
                  } else {
                    $btn.html('Enable');
                    return $parent.data('is-disabled', 1);
                  }
              }
            }
          }));
          return 'json';
        };
      })(this));
    };

    return RulesEdit;

  })();

  LevelSettings = (function() {
    function LevelSettings(rules_id, level1, xp, skills_categories_formulas1, perks_formula1, skills_categories) {
      var i, len, ref, skills_category;
      this.rules_id = rules_id;
      this.level = level1;
      this.xp = xp;
      this.skills_categories_formulas = skills_categories_formulas1;
      this.perks_formula = perks_formula1;
      this.skills_categories = skills_categories;
      this.formula_elem_ids = {
        'perks': "level_settings-" + this.level + "-perks_formula",
        'skills_categories': {}
      };
      ref = this.skills_categories;
      for (i = 0, len = ref.length; i < len; i++) {
        skills_category = ref[i];
        this.formula_elem_ids.skills_categories[skills_category.id] = "level_settings-" + this.level + "-skills_category-" + skills_category.id + "-formula";
      }
    }

    return LevelSettings;

  })();

  window.LevelEditor = (function() {
    function LevelEditor(rules_id, base_elem_id, level_settings_list, skills_categories) {
      var i, len, ls;
      this.rules_id = rules_id;
      this.base_elem_id = base_elem_id;
      this.skills_categories = skills_categories;
      this.render_table = bind(this.render_table, this);
      this.add_lvl_rows = bind(this.add_lvl_rows, this);
      this.level_settings = [];
      for (i = 0, len = level_settings_list.length; i < len; i++) {
        ls = level_settings_list[i];
        this.level_settings.push(new LevelSettings(this.rules_id, ls.level, ls.xp, ls.skills_categories_formulas, ls.perks_formula, this.skills_categories));
      }
      this.level_settings.sort(function(settings1, settings2) {
        if (settings1.level > settings2.level) {
          return 1;
        } else if (settings1.level === settings2.level) {
          return 0;
        } else {
          return -1;
        }
      });
      this.render_table();
      $('#level-table-add-rows').bind('click', (function(_this) {
        return function(e) {
          var $last_inserted_row, rows_to_ins;
          $last_inserted_row = $('#character-levels-table tr:last');
          rows_to_ins = parseInt($('#level-rows-to-add').val());
          return _this.add_lvl_rows(rows_to_ins, $last_inserted_row);
        };
      })(this));
      this.init_formula_editors_for_settings(this.level_settings);
    }

    LevelEditor.prototype.add_lvl_rows = function(rows_to_ins, $last_inserted_row) {
      var from_level, i, last_level, level, level_settings, num, perks_formula, ref, ref1, ref2, rows_html, skills_categories_formulas, skills_category, to_level;
      last_level = parseInt($last_inserted_row.find('.level_settings-level').text());
      if (isNaN(last_level)) {
        last_level = 0;
      }
      from_level = last_level + 1;
      to_level = last_level + rows_to_ins;
      perks_formula = $last_inserted_row.find("[name=level_settings-" + (last_level - 1) + "-perks_formula]").val() || 0;
      skills_categories_formulas = {};
      ref = this.skills_categories;
      for (num in ref) {
        skills_category = ref[num];
        skills_categories_formulas[skills_category.id] = $last_inserted_row.find("[name=skills_categories_formulas-" + num + "-formula]").val() || 0;
      }
      level_settings = [];
      for (level = i = ref1 = from_level, ref2 = to_level; ref1 <= ref2 ? i <= ref2 : i >= ref2; level = ref1 <= ref2 ? ++i : --i) {
        level_settings.push(new LevelSettings(this.rules_id, level, '', skills_categories_formulas, perks_formula, this.skills_categories));
      }
      rows_html = board.ECT.render('/static/js/templates/rules/character_level_rows.ect', {
        level_settings: level_settings,
        skills_categories: this.skills_categories
      });
      $('#character-levels-table > tbody').append(rows_html);
      return this.init_formula_editors_for_settings(level_settings);
    };

    LevelEditor.prototype.init_formula_editors_for_settings = function(level_settings) {
      var category_id, editor_objs, elem_id, i, len, ref, settings;
      editor_objs = [];
      for (i = 0, len = level_settings.length; i < len; i++) {
        settings = level_settings[i];
        editor_objs.push(new board.FormulaEditor(settings.formula_elem_ids.perks));
        ref = settings.formula_elem_ids.skills_categories;
        for (category_id in ref) {
          elem_id = ref[category_id];
          editor_objs.push(new board.FormulaEditor(elem_id));
        }
      }
      return $('.js-skill-title').each(function() {
        var editor, j, len1, results;
        results = [];
        for (j = 0, len1 = editor_objs.length; j < len1; j++) {
          editor = editor_objs[j];
          results.push(editor.add_keyword($(this).text()));
        }
        return results;
      });
    };

    LevelEditor.prototype.render_table = function() {
      var html;
      html = board.ECT.render('/static/js/templates/rules/character_level.ect', {
        level_settings: this.level_settings,
        skills_categories: this.skills_categories
      });
      return $("#" + this.base_elem_id).html(html);
    };

    return LevelEditor;

  })();

}).call(this);

//# sourceMappingURL=rules.js.map
