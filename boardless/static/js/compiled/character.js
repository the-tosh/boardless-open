// Generated by CoffeeScript 1.9.1
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  board.Skill = (function() {
    function Skill(arg) {
      this.id = arg.id, this.title = arg.title, this.base_value = arg.base_value, this.max_value = arg.max_value, this.formula = arg.formula, this.category_id = arg.category_id, this.related_skills = arg.related_skills;
      this.get_char_elem = bind(this.get_char_elem, this);
    }

    Skill.prototype.get_char_elem = function(character_id) {
      return $(".js-skill-value-" + character_id + "[data-skill-id=" + this.id + "]:first .js-value");
    };

    return Skill;

  })();

  board.Master = (function() {
    function Master() {
      this.apply_category_points = bind(this.apply_category_points, this);
      this.apply_xp = bind(this.apply_xp, this);
      this.apply = bind(this.apply, this);
      this.reset_data_to_apply = bind(this.reset_data_to_apply, this);
      this.init_globals = bind(this.init_globals, this);
      this.changed_points = {};
      this.init_globals();
    }

    Master.prototype.init_globals = function() {
      return board.SESSION_GLOBALS.MASTER = this;
    };

    Master.prototype.reset_data_to_apply = function() {
      var char_id, character, ref, results, skill, skill_id;
      ref = board.SESSION_GLOBALS.CHARACTERS;
      results = [];
      for (char_id in ref) {
        character = ref[char_id];
        this.changed_points[character.id] = {};
        results.push((function() {
          var ref1, results1;
          ref1 = board.SESSION_GLOBALS.SKILLS;
          results1 = [];
          for (skill_id in ref1) {
            skill = ref1[skill_id];
            results1.push(this.changed_points[character.id][skill.category_id] = 0);
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    Master.prototype.do_sheet_binds = function() {
      $('.js-inc-points').bind('click', (function(_this) {
        return function(e) {
          var category_id, character_id;
          character_id = parseInt($(e.currentTarget).data('characterId'));
          return category_id = parseInt($(e.currentTarget).data('categoryId'));
        };
      })(this));
      $('.js-dec-points').bind('click', (function(_this) {
        return function(e) {
          var category_id, character_id;
          character_id = parseInt($(e.currentTarget).data('characterId'));
          return category_id = parseInt($(e.currentTarget).data('categoryId'));
        };
      })(this));
      return $('#js-characters-sheet-apply-btn').bind('click', (function(_this) {
        return function(e) {
          e.preventDefault();
          return _this.apply();
        };
      })(this));
    };

    Master.prototype.apply = function() {
      return this.apply_xp();
    };

    Master.prototype.apply_xp = function() {
      var clb, xp_data;
      xp_data = {
        'game_session_id': board.SESSION_GLOBALS.GAME_SESSION_ID,
        'xp': []
      };
      $('.js-addxp-character').each((function(_this) {
        return function(i, el) {
          var $xp_el, char_id, char_xp;
          $xp_el = $(el);
          char_id = parseInt($xp_el.data('character-id'));
          char_xp = parseInt($xp_el.val());
          if (!char_xp) {
            return;
          }
          xp_data["xp-" + i + "-character_id"] = char_id;
          return xp_data["xp-" + i + "-character_xp"] = char_xp;
        };
      })(this));
      clb = (function(_this) {
        return function(result) {
          if (result.success) {
            console.log('AddXp: OK');
            return $('.js-addxp-character').val(0);
          } else {
            return console.log('AddXp: ERROR!', result);
          }
        };
      })(this);
      return board.SESSION_GLOBALS.WSCLIENT.request('CharactersAddXp', xp_data, clb);
    };

    Master.prototype.apply_category_points = function() {
      var cat_id_key, category_id, char_id, char_id_key, clb, data, num, points_data, ref, val_key, value;
      data = {
        'game_session_id': board.SESSION_GLOBALS.GAME_SESSION_ID
      };
      num = 0;
      ref = this.changed_points;
      for (char_id in ref) {
        points_data = ref[char_id];
        for (category_id in points_data) {
          value = points_data[category_id];
          if (value === 0) {
            continue;
          }
          char_id_key = "points-" + num + "-character_id";
          cat_id_key = "points-" + num + "-category_id";
          val_key = "points-" + num + "-value";
          data[char_id_key] = char_id;
          data[cat_id_key] = category_id;
          data[val_key] = value;
          num += 1;
        }
      }
      clb = (function(_this) {
        return function(result) {
          if (result.success) {
            return _this.reset_data_to_apply();
          } else {
            return console.log(result.error);
          }
        };
      })(this);
      return board.SESSION_GLOBALS.WSCLIENT.request('CharacterChangeCategoryPoints', data, clb);
    };

    return Master;

  })();

  board.Character = (function() {
    function Character(arg) {
      this.id = arg.id, this.name = arg.name, this.level = arg.level, this.xp = arg.xp, this.role = arg.role, this.skills = arg.skills, this.skill_points = arg.skill_points, this.avatar = arg.avatar, this.items = arg.items;
      this.update_params = bind(this.update_params, this);
      this.disconnect = bind(this.disconnect, this);
      this.join = bind(this.join, this);
      this.is_online = false;
    }

    Character.prototype.join = function() {
      return this.is_online = true;
    };

    Character.prototype.disconnect = function() {
      return this.is_online = false;
    };

    Character.prototype.update_params = function(params) {
      var inner_key, inner_value, outer_key, outer_value, results;
      results = [];
      for (outer_key in params) {
        outer_value = params[outer_key];
        switch (outer_key) {
          case "skills":
          case "skill_points":
          case "items":
          case "item_groups":
            results.push((function() {
              var results1;
              results1 = [];
              for (inner_key in outer_value) {
                inner_value = outer_value[inner_key];
                inner_key = parseInt(inner_key);
                results1.push(this[outer_key][inner_key] = inner_value);
              }
              return results1;
            }).call(this));
            break;
          default:
            results.push(this[outer_key] = outer_value);
        }
      }
      return results;
    };

    return Character;

  })();

  board.ThePlayer = (function(superClass) {
    extend(ThePlayer, superClass);

    function ThePlayer(arg) {
      this.id = arg.id, this.name = arg.name, this.level = arg.level, this.xp = arg.xp, this.role = arg.role, this.skills = arg.skills, this.skill_points = arg.skill_points, this.avatar = arg.avatar, this.items = arg.items, this.item_groups = arg.item_groups;
      this.do_sheet_binds = bind(this.do_sheet_binds, this);
      this.save_skills = bind(this.save_skills, this);
      this.pick_up_playfield_object = bind(this.pick_up_playfield_object, this);
      this.take_item_off = bind(this.take_item_off, this);
      this.put_item_on = bind(this.put_item_on, this);
      this.dec_skill = bind(this.dec_skill, this);
      this.inc_skill = bind(this.inc_skill, this);
      this.related_skills_prompt = bind(this.related_skills_prompt, this);
      this.render_inventory = bind(this.render_inventory, this);
      this.render_dummy = bind(this.render_dummy, this);
      this.reset_data_to_apply = bind(this.reset_data_to_apply, this);
      this.init_globals = bind(this.init_globals, this);
      ThePlayer.__super__.constructor.call(this, {
        id: this.id,
        name: this.name,
        level: this.level,
        xp: this.xp,
        role: this.role,
        skills: this.skills,
        skill_points: this.skill_points,
        avatar: this.avatar,
        items: this.items
      });
      this.changed_skills = {};
      this.changed_categories = {};
      this.reset_data_to_apply();
      this.init_globals();
      this.render_dummy();
      this.render_inventory();
    }

    ThePlayer.prototype.init_globals = function() {
      return board.SESSION_GLOBALS.THE_PLAYER = this;
    };

    ThePlayer.prototype.reset_data_to_apply = function() {
      var category_data, category_id, ref, ref1, results, skill_data, skill_id;
      ref = this.skills;
      for (skill_id in ref) {
        skill_data = ref[skill_id];
        this.changed_skills[skill_id] = 0;
      }
      ref1 = this.skill_points;
      results = [];
      for (category_id in ref1) {
        category_data = ref1[category_id];
        results.push(this.changed_categories[category_id] = 0);
      }
      return results;
    };

    ThePlayer.prototype.render_dummy = function() {
      var $tbl, data, html;
      $tbl = $('#the-player-dummy-tbl');
      data = {
        'item_groups': this.item_groups,
        'items': this.items
      };
      html = board.ECT.render('/static/js/templates/play/dummy.ect', data);
      $tbl.html(html);
      return $('.js-take-item-off').bind('click', (function(_this) {
        return function(e) {
          var item_id;
          item_id = $(e.currentTarget).data('itemId');
          return _this.take_item_off(item_id);
        };
      })(this));
    };

    ThePlayer.prototype.render_inventory = function() {
      var $tbl, data, html;
      $tbl = $('#the-player-inventory-tbl');
      data = {
        'item_groups': this.item_groups,
        'items': this.items
      };
      html = board.ECT.render('/static/js/templates/play/inventory.ect', data);
      $tbl.html(html);
      return $('.js-put-item-on').bind('click', (function(_this) {
        return function(e) {
          var item_id;
          item_id = $(e.currentTarget).data('itemId');
          return _this.put_item_on(item_id);
        };
      })(this));
    };

    ThePlayer.prototype.related_skills_prompt = function(skill_id, new_value) {
      var elem, formula, html, j, len, modified_value, old_value, ref, rel_skill, rel_skill_id, related_skills, results, s_id, scope, skill;
      related_skills = board.SESSION_GLOBALS.SKILLS[skill_id].related_skills;
      scope = {
        'level': this.level
      };
      ref = board.SESSION_GLOBALS.SKILLS;
      for (s_id in ref) {
        skill = ref[s_id];
        if (parseInt(s_id) === skill_id) {
          scope[skill.title] = new_value;
        } else {
          scope[skill.title] = this.skills[s_id].base_value;
        }
      }
      results = [];
      for (j = 0, len = related_skills.length; j < len; j++) {
        rel_skill_id = related_skills[j];
        rel_skill = board.SESSION_GLOBALS.SKILLS[rel_skill_id];
        formula = rel_skill.formula;
        modified_value = evalWith(formula, scope);
        old_value = this.skills[rel_skill_id].effective_value;
        elem = rel_skill.get_char_elem(this.id);
        html = "" + old_value;
        if (modified_value !== old_value) {
          html = old_value + " <span style='color: green;'>(" + modified_value + ")</span>";
        }
        results.push(elem.html(html));
      }
      return results;
    };

    ThePlayer.prototype.inc_skill = function(category_id, skill_id) {
      var $category_elem, $value_elem, new_value, old_value, points_left;
      $category_elem = $("#js-category-points-value-" + this.id + "-" + category_id);
      points_left = parseInt($category_elem.html());
      if (points_left > 0) {
        $value_elem = $("#js-skill-value-" + this.id + "-" + skill_id + " .js-value");
        old_value = $value_elem.html();
        new_value = parseInt(old_value) + 1;
        $value_elem.html(new_value);
        $category_elem.html(points_left - 1);
        this.changed_skills[skill_id] += 1;
        this.changed_categories[category_id] -= 1;
        return this.related_skills_prompt(skill_id, new_value);
      }
    };

    ThePlayer.prototype.dec_skill = function(category_id, skill_id) {
      var $category_elem, $value_elem, new_value, old_value, points_left;
      $category_elem = $("#js-category-points-value-" + this.id + "-" + category_id);
      points_left = parseInt($category_elem.html());
      $value_elem = $("#js-skill-value-" + this.id + "-" + skill_id + " .js-value");
      old_value = $value_elem.html();
      new_value = parseInt(old_value) - 1;
      if (new_value >= this.skills[skill_id].base_value) {
        $value_elem.html(new_value);
        $category_elem.html(points_left + 1);
        this.changed_skills[skill_id] -= 1;
        this.changed_categories[category_id] += 1;
        return this.related_skills_prompt(skill_id, new_value);
      }
    };

    ThePlayer.prototype.put_item_on = function(item_id) {
      var clb, data;
      data = {
        'game_session_id': board.SESSION_GLOBALS.GAME_SESSION_ID,
        'item_id': item_id
      };
      clb = (function(_this) {
        return function(result) {
          if (result.success) {
            _this.items = result.items;
            _this.render_dummy();
            return _this.render_inventory();
          } else {
            return console.log(result);
          }
        };
      })(this);
      return board.SESSION_GLOBALS.WSCLIENT.request('CharacterPutItemOn', data, clb);
    };

    ThePlayer.prototype.take_item_off = function(item_id) {
      var clb, data;
      data = {
        'game_session_id': board.SESSION_GLOBALS.GAME_SESSION_ID,
        'item_id': item_id
      };
      clb = (function(_this) {
        return function(result) {
          if (result.success) {
            _this.items = result.items;
            _this.render_dummy();
            return _this.render_inventory();
          } else {
            return console.log(result);
          }
        };
      })(this);
      return board.SESSION_GLOBALS.WSCLIENT.request('CharacterTakeItemOff', data, clb);
    };

    ThePlayer.prototype.pick_up_playfield_object = function(obj) {
      var clb, data;
      data = {
        'game_session_id': board.SESSION_GLOBALS.GAME_SESSION_ID,
        'obj_id': obj.id
      };
      clb = (function(_this) {
        return function(result) {
          if (result.success) {
            _this.items = result.items;
            _this.render_dummy();
            _this.render_inventory();
            return obj.delete_elem();
          } else {
            return console.log(result);
          }
        };
      })(this);
      return board.SESSION_GLOBALS.WSCLIENT.request('CharacterPickUpPlayfieldObject', data, clb);
    };

    ThePlayer.prototype.save_skills = function() {
      var clb, data, id_key, num, ref, skill_id, val_key, value;
      data = {
        'game_session_id': board.SESSION_GLOBALS.GAME_SESSION_ID
      };
      num = 0;
      ref = this.changed_skills;
      for (skill_id in ref) {
        value = ref[skill_id];
        if (value === 0) {
          continue;
        }
        id_key = "skills-" + num + "-id";
        val_key = "skills-" + num + "-value";
        data[id_key] = skill_id;
        data[val_key] = value;
        num += 1;
      }
      clb = (function(_this) {
        return function(result) {
          if (result.success) {
            _this.reset_data_to_apply();
            return _this.skills = result.skills;
          } else {
            return console.log('ERROR!', result);
          }
        };
      })(this);
      return board.SESSION_GLOBALS.WSCLIENT.request('CharacterSaveSkills', data, clb);
    };

    ThePlayer.prototype.do_sheet_binds = function() {
      $('.js-inc-skill').bind('click', (function(_this) {
        return function(e) {
          var category_id, skill_id;
          category_id = $(e.currentTarget).data('categoryId');
          skill_id = $(e.currentTarget).data('skillId');
          return _this.inc_skill(category_id, skill_id);
        };
      })(this));
      $('.js-dec-skill').bind('click', (function(_this) {
        return function(e) {
          var category_id, skill_id;
          category_id = $(e.currentTarget).data('categoryId');
          skill_id = $(e.currentTarget).data('skillId');
          return _this.dec_skill(category_id, skill_id);
        };
      })(this));
      return $('#js-characters-sheet-apply-btn').bind('click', (function(_this) {
        return function(e) {
          e.preventDefault();
          return _this.save_skills();
        };
      })(this));
    };

    return ThePlayer;

  })(board.Character);

}).call(this);

//# sourceMappingURL=character.js.map
