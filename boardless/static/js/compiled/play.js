// Generated by CoffeeScript 1.9.1
(function() {
  var CharacterSheet, DiceManager, Drawer, Grid, Playfield, Tool, Toolbox,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  board.SESSION_GLOBALS = {
    'GAME_SESSION_ID': null,
    'USER_ROLE': null,
    'ITEMS': null,
    'WSCLIENT': null,
    'THE_PLAYER': null,
    'MASTER': null,
    'CHARACTERS': null,
    'TOKEN_TOOLS': null
  };

  window.PlayManager = (function() {
    function PlayManager(game_session_id, user_role, cols_for_char_tbl, characters_data, the_player_id, skills, item_groups, skills_categories, items, character_token, dices1, master_id, token_tools) {
      this.cols_for_char_tbl = cols_for_char_tbl;
      this.characters_data = characters_data;
      this.the_player_id = the_player_id;
      this.skills = skills;
      this.item_groups = item_groups;
      this.skills_categories = skills_categories;
      this.character_token = character_token;
      this.dices = dices1;
      this.master_id = master_id;
      this.do_ws_binds = bind(this.do_ws_binds, this);
      this.init_ws = bind(this.init_ws, this);
      this.init_dices = bind(this.init_dices, this);
      this.init_grid = bind(this.init_grid, this);
      this.init_character_sheet = bind(this.init_character_sheet, this);
      this.init_playfield = bind(this.init_playfield, this);
      this.init_user = bind(this.init_user, this);
      this.set_master_status = bind(this.set_master_status, this);
      this.init_characters = bind(this.init_characters, this);
      this.init_globals(game_session_id, user_role, items, token_tools);
      this.init_ws();
      this.init_characters();
      this.init_playfield();
      this.init_user();
      this.init_character_sheet();
      this.init_grid();
      this.init_dices();
      this.do_ws_binds();
    }

    PlayManager.prototype.init_globals = function(game_session_id, user_role, items, token_tools) {
      var ref, results, skill, skill_data, skill_id;
      board.SESSION_GLOBALS = {
        'GAME_SESSION_ID': game_session_id,
        'USER_ROLE': user_role,
        'ITEMS': items,
        'SKILLS': {},
        'WSCLIENT': null,
        'THE_PLAYER': null,
        'MASTER': null,
        'CHARACTERS': {},
        'TOKEN_TOOLS': token_tools
      };
      ref = this.skills;
      results = [];
      for (skill_id in ref) {
        skill_data = ref[skill_id];
        skill = new board.Skill(skill_data);
        results.push(board.SESSION_GLOBALS.SKILLS[skill.id] = skill);
      }
      return results;
    };

    PlayManager.prototype.init_characters = function() {
      var character, character_data, clb, data, j, len, ref;
      ref = this.characters_data;
      for (j = 0, len = ref.length; j < len; j++) {
        character_data = ref[j];
        character = new board.Character(character_data);
        board.SESSION_GLOBALS.CHARACTERS[character.id] = character;
      }
      data = {
        'game_session_id': board.SESSION_GLOBALS.GAME_SESSION_ID
      };
      clb = (function(_this) {
        return function(result) {
          var char_id, l, len1, ref1;
          if (result.success) {
            _this.set_master_status(result.master_is_online);
            ref1 = result.online_players_ids;
            for (l = 0, len1 = ref1.length; l < len1; l++) {
              char_id = ref1[l];
              board.SESSION_GLOBALS.CHARACTERS[char_id].join();
            }
            return board.EventDispatcher.emmit('received_online_players', {
              'ids': result.online_players_ids
            });
          } else {
            return console.log(result);
          }
        };
      })(this);
      return board.SESSION_GLOBALS.WSCLIENT.request('GetOnlinePlayers', data, clb);
    };

    PlayManager.prototype.set_master_status = function(status) {
      var $elem;
      $elem = $('#js-master-data');
      if (status) {
        return $elem.removeClass('half-opaque');
      } else {
        return $elem.addClass('half-opaque');
      }
    };

    PlayManager.prototype.init_user = function() {
      var char_dict, character_data, j, len, ref;
      switch (board.SESSION_GLOBALS.USER_ROLE) {
        case "player":
          if ((this.the_player_id != null) && this.the_player_id !== -1) {
            ref = this.characters_data;
            for (j = 0, len = ref.length; j < len; j++) {
              character_data = ref[j];
              if (character_data.id === this.the_player_id) {
                char_dict = {
                  'item_groups': this.item_groups
                };
                $.extend(char_dict, character_data);
                new board.ThePlayer(char_dict);
                return;
              }
            }
          }
          break;
        case "master":
          new board.Master();
      }
    };

    PlayManager.prototype.init_playfield = function() {
      return this.playfield = new Playfield();
    };

    PlayManager.prototype.init_character_sheet = function() {
      return this.character_sheet = new CharacterSheet(this.cols_for_char_tbl);
    };

    PlayManager.prototype.init_grid = function() {
      var grid;
      grid = new Grid();
      return grid.draw_hexagon_grid();
    };

    PlayManager.prototype.init_dices = function() {
      var dm;
      return dm = new DiceManager(this.dices);
    };

    PlayManager.prototype.init_ws = function() {
      if (this.character_token != null) {
        return board.SESSION_GLOBALS.WSCLIENT = new WSClient(this.character_token);
      } else {
        return board.SESSION_GLOBALS.WSCLIENT = new DummyClient();
      }
    };

    PlayManager.prototype.do_ws_binds = function() {
      board.SESSION_GLOBALS.WSCLIENT.register_action('CharacterJoined', (function(_this) {
        return function(params) {
          var character, character_data;
          character_data = params.character;
          if (character_data.id === _this.master_id) {
            _this.set_master_status(true);
            return;
          }
          character = board.SESSION_GLOBALS.CHARACTERS[character_data.id];
          if (character == null) {
            board.SESSION_GLOBALS.CHARACTERS[character_data.id] = new board.Character(character_data);
            character = board.SESSION_GLOBALS.CHARACTERS[character_data.id];
          }
          character.join();
          _this.character_sheet.character_joined(character.id);
          return _this.playfield.toolbox.render_avatars();
        };
      })(this));
      return board.SESSION_GLOBALS.WSCLIENT.register_action('CharacterDisconnected', (function(_this) {
        return function(params) {
          var character, character_id;
          character_id = params.character_id;
          if (character_id === _this.master_id) {
            _this.set_master_status(false);
            return;
          }
          character = board.SESSION_GLOBALS.CHARACTERS[character_id];
          character.disconnect();
          _this.character_sheet.character_joined(character.id);
          return _this.playfield.toolbox.render_avatars();
        };
      })(this));
    };

    return PlayManager;

  })();

  DiceManager = (function() {
    function DiceManager(dices1) {
      this.dices = dices1;
      this.do_binds = bind(this.do_binds, this);
      this.do_ws_binds = bind(this.do_ws_binds, this);
      this.move_window = bind(this.move_window, this);
      this.$dice_window = $('#js-dices');
      this.point = new board.Point(this.$dice_window.offset().left, this.$dice_window.offset().top);
      this.do_binds();
      this.do_ws_binds();
    }

    DiceManager.prototype.move_window = function(point) {
      this.$dice_window.css({
        'left': point.x,
        'top': point.y
      });
      return this.point = point;
    };

    DiceManager.prototype.do_ws_binds = function() {
      return board.SESSION_GLOBALS.WSCLIENT.register_action('RollDiceResults', (function(_this) {
        return function(params) {
          var $res_elem, dice, dice_id, html, i, res, results;
          $res_elem = $('#js-dice-results');
          $res_elem.empty();
          results = [];
          for (i in params.results) {
            res = params.results[i];
            dice_id = parseInt(res.id);
            dice = _this.dices[dice_id];
            console.log('dice', dice);
            html = board.ECT.render('/static/js/templates/play/dice.ect', {
              'dice': dice,
              'value': res.value
            });
            results.push($res_elem.append(html));
          }
          return results;
        };
      })(this));
    };

    DiceManager.prototype.do_binds = function() {
      if (board.SESSION_GLOBALS.USER_ROLE === 'master') {
        $('.js-base-dice').bind('click', (function(_this) {
          return function(e) {
            var dice2add;
            dice2add = $(e.currentTarget).clone();
            dice2add.removeClass('js-base-dice');
            dice2add.addClass('js-selected-dice');
            dice2add.bind('click', function(e) {
              return $(e.currentTarget).remove();
            });
            return $('#js-selected-dices').append(dice2add);
          };
        })(this));
        $('#js-roll-dice').bind('click', (function(_this) {
          return function(e) {
            var dices;
            dices = {};
            $('.js-selected-dice').each(function(idx, elem) {
              return dices["dices_ids-" + idx] = parseInt($(elem).attr('dice-id'));
            });
            return board.SESSION_GLOBALS.WSCLIENT.request('RollDices', dices);
          };
        })(this));
        $('#js-dices-reset').bind('click', function(e) {
          return $('#js-selected-dices').empty();
        });
      }
      return interact('#js-dices').draggable({
        restrict: {
          restriction: 'body',
          elementRect: {
            top: 0,
            left: 0,
            bottom: 1,
            right: 1
          }
        },
        onmove: (function(_this) {
          return function(e) {
            var point;
            point = new board.Point(_this.point.x + e.dx, _this.point.y + e.dy);
            return _this.move_window(point);
          };
        })(this)
      });
    };

    return DiceManager;

  })();

  Tool = (function() {
    function Tool(color, size, type, extra) {
      this.color = color || "#000000";
      this.size = size || 1;
      this.type = type || "brush";
      this.extra = extra || {};
    }

    return Tool;

  })();

  Toolbox = (function() {
    function Toolbox(playfield) {
      this.playfield = playfield;
      this.listen_events = bind(this.listen_events, this);
      this.do_set_tool_binds = bind(this.do_set_tool_binds, this);
      this.do_binds = bind(this.do_binds, this);
      this.apply_tool = bind(this.apply_tool, this);
      this.set_tool = bind(this.set_tool, this);
      this.show_related_tool_settings = bind(this.show_related_tool_settings, this);
      this.set_color = bind(this.set_color, this);
      this.set_size = bind(this.set_size, this);
      this.init_size_slider = bind(this.init_size_slider, this);
      this.init_color_picker = bind(this.init_color_picker, this);
      this.render_avatars = bind(this.render_avatars, this);
      this.render_token_tools = bind(this.render_token_tools, this);
      this.render_drawing_tools = bind(this.render_drawing_tools, this);
      this.highlight_init_tool = bind(this.highlight_init_tool, this);
      if (board.SESSION_GLOBALS.USER_ROLE !== "master") {
        return;
      }
      this.tool = new Tool();
      this.render_drawing_tools();
      this.init_color_picker();
      this.init_size_slider();
      this.render_token_tools();
      this.render_avatars();
      this.highlight_init_tool();
      this.do_binds();
      this.listen_events();
    }

    Toolbox.prototype.highlight_init_tool = function() {
      return $('.js-toolbox-set-tool[data-tool=brush]').addClass('js-active-tool');
    };

    Toolbox.prototype.render_drawing_tools = function() {
      var $object_elem, html;
      $object_elem = $('#js-toolbox-drawing-tools');
      html = board.ECT.render('/static/js/templates/play/toolbox_drawing_tools.ect', {
        'board': board
      });
      return $object_elem.html(html);
    };

    Toolbox.prototype.render_token_tools = function() {
      var $object_elem, data, html, j, len, obj, ref, result_html;
      $object_elem = $('#js-toolbox-token-tools');
      result_html = '';
      ref = board.SESSION_GLOBALS.TOKEN_TOOLS;
      for (j = 0, len = ref.length; j < len; j++) {
        obj = ref[j];
        data = {
          'obj': obj
        };
        html = board.ECT.render('/static/js/templates/play/toolbox_tokens.ect', data);
        result_html = result_html + "\n" + html;
      }
      $object_elem.html(result_html);
      $('#js-choose-item').bind('click', (function(_this) {
        return function(e) {
          return board.Popup.render_template('/play/new_item.ect', {
            'items': board.SESSION_GLOBALS.ITEMS
          }, function() {
            $('#js-new-item-form-ok-btn').bind('click', function(e) {
              board.Popup.hide();
              _this.playfield.move_el_to_proxy_container('#js-new-item-container .js-new-item-form');
              board.Popup.clean();
              $('.js-active-tool').removeClass('js-active-tool');
              $('#js-choose-item').addClass('js-active-tool');
              return _this.set_tool($('#js-choose-item').data('tool'));
            });
            $('#js-new-item-form-cancel-btn').bind('click', function(e) {
              return board.Popup.hide();
            });
            return $(".js-select2").select2();
          });
        };
      })(this));
      return $('#js-choose-npc').bind('click', (function(_this) {
        return function(e) {
          return board.Popup.render_template('/play/new_npc.ect', {}, function() {
            $('#js-new-npc-form-ok-btn').bind('click', function(e) {
              board.Popup.hide();
              _this.playfield.move_el_to_proxy_container('#js-new-npc-container .js-new-npc-form');
              board.Popup.clean();
              $('.js-active-tool').removeClass('js-active-tool');
              $('#js-choose-npc').addClass('js-active-tool');
              return _this.set_tool($('#js-choose-npc').data('tool'));
            });
            return $('#js-new-npc-form-cancel-btn').bind('click', function(e) {
              return board.Popup.hide();
            });
          });
        };
      })(this));
    };

    Toolbox.prototype.render_avatars = function() {
      var $objects_elem, character, character_id, data, html, ref, result_html;
      $objects_elem = $('#js-toolbox-players-avatars');
      result_html = '';
      ref = board.SESSION_GLOBALS.CHARACTERS;
      for (character_id in ref) {
        character = ref[character_id];
        data = {
          'character': character
        };
        html = board.ECT.render('/static/js/templates/play/toolbox_character.ect', data);
        result_html = result_html + "\n" + html;
      }
      $objects_elem.html(result_html);
      return this.do_set_tool_binds();
    };

    Toolbox.prototype.init_color_picker = function() {
      return $('#js-color-palette').spectrum({
        showPaletteOnly: true,
        togglePaletteOnly: true,
        togglePaletteMoreText: 'more',
        togglePaletteLessText: 'less',
        color: '#000',
        showInitial: true,
        palette: [["#000", "#444", "#666", "#999", "#ccc", "#eee", "#f3f3f3", "#fff"], ["#f00", "#f90", "#ff0", "#0f0", "#0ff", "#00f", "#90f", "#f0f"], ["#f4cccc", "#fce5cd", "#fff2cc", "#d9ead3", "#d0e0e3", "#cfe2f3", "#d9d2e9", "#ead1dc"], ["#ea9999", "#f9cb9c", "#ffe599", "#b6d7a8", "#a2c4c9", "#9fc5e8", "#b4a7d6", "#d5a6bd"], ["#e06666", "#f6b26b", "#ffd966", "#93c47d", "#76a5af", "#6fa8dc", "#8e7cc3", "#c27ba0"], ["#c00", "#e69138", "#f1c232", "#6aa84f", "#45818e", "#3d85c6", "#674ea7", "#a64d79"], ["#900", "#b45f06", "#bf9000", "#38761d", "#134f5c", "#0b5394", "#351c75", "#741b47"], ["#600", "#783f04", "#7f6000", "#274e13", "#0c343d", "#073763", "#20124d", "#4c1130"]],
        change: (function(_this) {
          return function(color) {
            return _this.set_color(color.toHexString());
          };
        })(this)
      });
    };

    Toolbox.prototype.init_size_slider = function() {
      return $('#js-size-slider').slider({
        min: 1,
        max: 10,
        value: 1,
        change: (function(_this) {
          return function(event, ui) {
            return _this.set_size(ui.value);
          };
        })(this)
      });
    };

    Toolbox.prototype.set_size = function(size) {
      this.tool.size = size;
      return this.playfield.drawer.context.lineWidth = size;
    };

    Toolbox.prototype.set_color = function(color) {
      this.tool.color = color;
      this.playfield.drawer.context.strokeStyle = color;
      return this.playfield.drawer.context.fillStyle = color;
    };

    Toolbox.prototype.show_related_tool_settings = function(tool_type) {
      $(".js-tool-related.js-" + tool_type + "-related").show();
      return $(".js-tool-related:not(.js-" + tool_type + "-related)").hide();
    };

    Toolbox.prototype.set_tool = function(tool_type) {
      var $element, field, item, item_id, j, l, len, len1, ref, ref1, results, results1;
      this.show_related_tool_settings(tool_type);
      switch (tool_type) {
        case "brush":
          this.tool.type = tool_type;
          this.playfield.drawer.context.strokeStyle = this.tool.color;
          return this.playfield.drawer.context.fillStyle = this.tool.color;
        case "eraser":
          return this.tool.type = tool_type;
        case "playfield-object":
          this.tool.type = tool_type;
          $element = $('.js-active-tool:first');
          this.tool.extra = {
            'type': $element.data('objectType'),
            'img_url': $element.data('imgUrl'),
            'title': $element.data('title')
          };
          switch (this.tool.extra.type) {
            case 'player':
              return this.tool.extra['player_id'] = parseInt($element.data('playerId'));
            case 'item':
              ref = $('#js-active-tool-hidden-proxy-container .js-new-item-form').serializeArray();
              results = [];
              for (j = 0, len = ref.length; j < len; j++) {
                field = ref[j];
                this.tool.extra[field.name] = field.value;
                item_id = parseInt(this.tool.extra.item);
                results.push((function() {
                  var l, len1, ref1, results1;
                  ref1 = board.SESSION_GLOBALS.ITEMS;
                  results1 = [];
                  for (l = 0, len1 = ref1.length; l < len1; l++) {
                    item = ref1[l];
                    if (item.id === item_id) {
                      this.tool.extra.title = item.title;
                      break;
                    } else {
                      results1.push(void 0);
                    }
                  }
                  return results1;
                }).call(this));
              }
              return results;
              break;
            case 'npc':
              ref1 = $('#js-active-tool-hidden-proxy-container .js-new-npc-form').serializeArray();
              results1 = [];
              for (l = 0, len1 = ref1.length; l < len1; l++) {
                field = ref1[l];
                results1.push(this.tool.extra[field.name] = field.value);
              }
              return results1;
          }
      }
    };

    Toolbox.prototype.apply_tool = function(tool_type) {
      switch (tool_type) {
        case "clear":
          this.playfield.drawer.context.clearRect(0, 0, this.playfield.drawer.width, this.playfield.drawer.height);
          return this.playfield.save_image();
      }
    };

    Toolbox.prototype.do_binds = function() {
      $('.js-toolbox-set-size').bind('click', (function(_this) {
        return function(e) {
          return _this.set_size($(e.currentTarget).data('size'));
        };
      })(this));
      $('.js-toolbox-apply-tool').bind('click', (function(_this) {
        return function(e) {
          return _this.apply_tool($(e.currentTarget).data('tool'));
        };
      })(this));
      return this.do_set_tool_binds();
    };

    Toolbox.prototype.do_set_tool_binds = function() {
      $('.js-toolbox-set-tool').unbind('click');
      return $('.js-toolbox-set-tool').bind('click', (function(_this) {
        return function(e) {
          var $this;
          $this = $(e.currentTarget);
          $('.js-active-tool').removeClass('js-active-tool');
          $this.addClass('js-active-tool');
          return _this.set_tool($this.data('tool'));
        };
      })(this));
    };

    Toolbox.prototype.listen_events = function() {
      return board.EventDispatcher.listen('received_online_players', (function(_this) {
        return function(e) {
          return _this.render_avatars();
        };
      })(this));
    };

    return Toolbox;

  })();

  Playfield = (function() {
    function Playfield() {
      this.load = bind(this.load, this);
      this.save_image = bind(this.save_image, this);
      this.do_ws_binds = bind(this.do_ws_binds, this);
      this.do_binds = bind(this.do_binds, this);
      this.add_object = bind(this.add_object, this);
      this.init_objects = bind(this.init_objects, this);
      this.toolbox = new Toolbox(this);
      this.drawer = new Drawer();
      this.init_objects({});
      this.load();
      if (board.SESSION_GLOBALS.USER_ROLE === "master") {
        this.do_binds();
      }
      this.do_ws_binds();
    }

    Playfield.prototype.move_el_to_proxy_container = function(selector_to_move) {
      var $elem;
      $elem = $(selector_to_move).detach();
      return $('#js-active-tool-hidden-proxy-container').html($elem);
    };

    Playfield.prototype.init_objects = function(tokens_data) {
      var init_attrs, j, k, len, results, token, token_data, v;
      this.play_tokens = {
        "npc": {},
        "item": {},
        "player": {}
      };
      this.tmp_play_tokens = {};
      results = [];
      for (j = 0, len = tokens_data.length; j < len; j++) {
        token_data = tokens_data[j];
        init_attrs = {};
        for (k in token_data) {
          v = token_data[k];
          switch (k) {
            case 'x':
            case 'y':
              continue;
            default:
              init_attrs[k] = v;
          }
        }
        init_attrs.point = new board.Point(parseFloat(token_data.x), parseFloat(token_data.y));
        init_attrs.is_stored = true;
        token = board.PlayfieldTokenFactory(token_data.type_string, init_attrs);
        token.extra = token_data.attrs;
        this.play_tokens[token_data.type_string][token.id] = token;
        token.delete_elem();
        token.render();
        results.push(token.do_binds());
      }
      return results;
    };

    Playfield.prototype.add_object = function(point) {
      var _d, clb, data, field_name, field_value, init_attrs, k, ref, ref1, tmp_key, token, v;
      _d = new Date();
      tmp_key = _d.getTime().toString();
      init_attrs = {};
      ref = this.toolbox.tool.extra;
      for (k in ref) {
        v = ref[k];
        switch (k) {
          case 'x':
          case 'y':
          case 'id':
            continue;
          default:
            init_attrs[k] = v;
        }
      }
      init_attrs.id = tmp_key;
      init_attrs.point = point;
      init_attrs.is_stored = false;
      token = board.PlayfieldTokenFactory(this.toolbox.tool.extra.type, init_attrs);
      this.tmp_play_tokens[tmp_key] = token;
      token.render();
      token.do_binds();
      _d = void 0;
      data = {
        'game_session_id': board.SESSION_GLOBALS.GAME_SESSION_ID,
        'tmp_key': tmp_key,
        'object_type': token.type,
        'x': token.point.x,
        'y': token.point.y,
        'title': token.title
      };
      ref1 = this.toolbox.tool.extra;
      for (field_name in ref1) {
        field_value = ref1[field_name];
        data[field_name] = field_value;
        token[field_name] = field_value;
      }
      clb = (function(_this) {
        return function(result) {
          if (result.success) {
            token = _this.tmp_play_tokens[result.tmp_key];
            token.after_creation(result.object_id);
            _this.play_tokens[token.type][result.object_id] = token;
            _this.tmp_play_tokens[result.tmp_key] = void 0;
            if (token.type === 'player') {
              return token.player_id = result.player_id;
            }
          } else {
            tmp_key = result.tmp_key || data.tmp_key;
            token = _this.tmp_play_tokens[tmp_key];
            token.delete_elem();
            return _this.tmp_play_tokens[tmp_key] = void 0;
          }
        };
      })(this);
      return board.SESSION_GLOBALS.WSCLIENT.request('PlayfieldTokenCreate', data, clb);
    };

    Playfield.prototype.do_binds = function() {
      this.drawer.$canvas.bind('mousedown', (function(_this) {
        return function(e) {
          var offset, point, ref, token, token_id;
          offset = $(e.currentTarget).parent().offset();
          point = new board.Point(e.pageX - (offset.left || 0), e.pageY - (offset.top || 0));
          switch (_this.toolbox.tool.type) {
            case 'playfield-object':
              if (_this.toolbox.tool.extra.type === 'player') {
                ref = _this.play_tokens['player'];
                for (token_id in ref) {
                  token = ref[token_id];
                  if (token.player_id === _this.toolbox.tool.extra.player_id) {
                    token.move_to(point);
                    token.save_point_to_db(point);
                    return;
                  }
                }
              }
              return _this.add_object(point);
            default:
              _this.drawer.is_dragging = true;
              _this.drawer.draw(_this.toolbox.tool, point);
              return _this.drawer.previous_point = point;
          }
        };
      })(this));
      this.drawer.$canvas.bind('mousemove', (function(_this) {
        return function(e) {
          var offset, point;
          if (_this.drawer.is_dragging) {
            offset = $(e.currentTarget).parent().offset();
            point = new board.Point(e.pageX - (offset.left || 0), e.pageY - (offset.top || 0));
            _this.drawer.draw(_this.toolbox.tool, point);
            return _this.drawer.previous_point = point;
          }
        };
      })(this));
      return this.drawer.$canvas.bind('mouseup mouseleave', (function(_this) {
        return function(e) {
          if (_this.drawer.is_dragging) {
            _this.drawer.is_dragging = false;
            _this.drawer.previous_point = null;
            return _this.save_image();
          }
        };
      })(this));
    };

    Playfield.prototype.do_ws_binds = function() {
      if (board.SESSION_GLOBALS.USER_ROLE !== "master") {
        board.SESSION_GLOBALS.WSCLIENT.register_action('ReloadPlayfield', (function(_this) {
          return function(params) {
            return _this.load();
          };
        })(this));
        board.SESSION_GLOBALS.WSCLIENT.register_action('MovePlayfieldObject', (function(_this) {
          return function(params) {
            var point, token, token_id, token_type;
            token_type = params.obj_type;
            token_id = params.obj_id;
            token = _this.play_tokens[token_type][token_id];
            if (token != null) {
              point = new board.Point(parseFloat(params.x), parseFloat(params.y));
              return token.move_to(point);
            }
          };
        })(this));
      }
      return board.SESSION_GLOBALS.WSCLIENT.register_action('DeletePlayfieldObject', (function(_this) {
        return function(params) {
          var token, token_id, token_type;
          token_type = params.obj_type;
          token_id = params.obj_id;
          token = _this.play_tokens[token_type][token_id];
          if (token != null) {
            return token.delete_elem();
          }
        };
      })(this));
    };

    Playfield.prototype.save_image = function() {
      var clb, data, image;
      image = this.drawer.canvas.toDataURL("image/png");
      clb = (function(_this) {
        return function(result) {
          if (result.success) {
            return console.log('ok');
          } else {
            return console.log('error');
          }
        };
      })(this);
      data = {
        'game_session_id': board.SESSION_GLOBALS.GAME_SESSION_ID,
        'image': image
      };
      return board.SESSION_GLOBALS.WSCLIENT.request('SaveImage', data, clb);
    };

    Playfield.prototype.load = function() {
      var clb;
      clb = (function(_this) {
        return function(result) {
          var image;
          if (result.success) {
            image = new Image();
            image.src = result.image;
            image.onload = function() {
              var height, width;
              width = $('#canvas_draw').width();
              height = $('#canvas_draw').height();
              _this.drawer.context.clearRect(0, 0, width, height);
              return _this.drawer.context.drawImage(image, 0, 0);
            };
            return _this.init_objects(result.playfield_objects);
          } else {
            return console.log('error', textStatus);
          }
        };
      })(this);
      return board.SESSION_GLOBALS.WSCLIENT.request('LoadPlayfield', {
        'game_session_id': board.SESSION_GLOBALS.GAME_SESSION_ID
      }, clb);
    };

    return Playfield;

  })();

  board.Point = (function() {
    function Point(x, y) {
      this.x = x;
      this.y = y;
    }

    return Point;

  })();

  Drawer = (function() {
    function Drawer() {
      this.draw = bind(this.draw, this);
      this.setup_context = bind(this.setup_context, this);
      this.canvas = document.getElementById("canvas_draw");
      this.context = this.canvas.getContext("2d");
      this.$canvas = $(this.canvas);
      this.is_dragging = false;
      this.previous_point = null;
      this.width = $('#canvas_draw').width();
      this.height = $('#canvas_draw').height();
      this.setup_context();
    }

    Drawer.prototype.setup_context = function() {
      this.context.strokeStyle = this.TOOL_COLOR;
      this.context.fillStyle = this.TOOL_COLOR;
      this.context.lineWidth = this.TOOL_SIZE;
      return this.context.lineJoin = "round";
    };

    Drawer.prototype.draw = function(tool, point) {
      var RADIUS, eraser_size;
      switch (tool.type) {
        case "eraser":
          eraser_size = tool.size * 1.5;
          return this.context.clearRect(point.x, point.y, eraser_size, eraser_size);
        case "brush":
          RADIUS = this.context.lineWidth / 2;
          this.context.beginPath();
          if (this.previous_point) {
            this.context.moveTo(this.previous_point.x, this.previous_point.y);
            this.context.lineTo(point.x, point.y);
            this.context.closePath();
            return this.context.stroke();
          } else {
            this.context.arc(point.x, point.y, RADIUS, 0, Math.PI * 2, false);
            this.context.closePath();
            return this.context.fill();
          }
      }
    };

    return Drawer;

  })();

  Grid = (function() {
    function Grid() {
      this.draw_hexagon_grid = bind(this.draw_hexagon_grid, this);
      this.COLOR = "#a3a3a3";
      this.LINE_WIDTH = 1;
      this.SIDE_SIZE = 35;
      this.GRID_WIDTH = 1010;
      this.GRID_HEIGHT = 510;
      this.canvas = document.getElementById("canvas_grid");
      this.context = this.canvas.getContext("2d");
      this.context.strokeStyle = this.COLOR;
      this.context.lineWidth = this.LINE_WIDTH;
    }

    Grid.prototype.draw_polygon = function(edges_amount, center_x, center_y) {
      var angle, edge_num, edge_x, edge_y, j, ref, results;
      results = [];
      for (edge_num = j = 0, ref = edges_amount; 0 <= ref ? j <= ref : j >= ref; edge_num = 0 <= ref ? ++j : --j) {
        angle = 2 * Math.PI / edges_amount * (edge_num + 0.5);
        edge_x = center_x + this.SIDE_SIZE / 2 * Math.cos(angle);
        edge_y = center_y + this.SIDE_SIZE / 2 * Math.sin(angle);
        if (!edge_num) {
          results.push(this.context.moveTo(edge_x, edge_y));
        } else {
          results.push(this.context.lineTo(edge_x, edge_y));
        }
      }
      return results;
    };

    Grid.prototype.draw_square_grid = function() {
      var j, l, ref, ref1, ref2, ref3, x, y;
      for (x = j = 0, ref = this.GRID_WIDTH, ref1 = this.SIDE_SIZE; ref1 > 0 ? j <= ref : j >= ref; x = j += ref1) {
        this.context.moveTo(0.5 + x, 0);
        this.context.lineTo(0.5 + x, this.GRID_HEIGHT);
      }
      for (y = l = 0, ref2 = this.GRID_HEIGHT, ref3 = this.SIDE_SIZE; ref3 > 0 ? l <= ref2 : l >= ref2; y = l += ref3) {
        this.context.moveTo(0, 0.5 + y);
        this.context.lineTo(this.GRID_WIDTH, 0.5 + y);
      }
      return this.context.stroke();
    };

    Grid.prototype.draw_hexagon_grid = function() {
      var HALF_SIDE, center_x, center_y, height, horiz_dist, is_even, j, l, offset, ref, ref1, ref2, ref3, ref4, ref5, vert_dist, width;
      HALF_SIDE = this.SIDE_SIZE / 2;
      height = this.SIDE_SIZE;
      vert_dist = 3 / 4 * height;
      width = Math.sqrt(3) / 2 * height;
      horiz_dist = width;
      for (center_x = j = ref = HALF_SIDE, ref1 = this.GRID_WIDTH, ref2 = horiz_dist; ref2 > 0 ? j <= ref1 : j >= ref1; center_x = j += ref2) {
        is_even = true;
        for (center_y = l = ref3 = HALF_SIDE, ref4 = this.GRID_HEIGHT, ref5 = vert_dist; ref5 > 0 ? l <= ref4 : l >= ref4; center_y = l += ref5) {
          is_even = !is_even;
          offset = 0;
          if (is_even) {
            offset = HALF_SIDE / 2 * Math.sqrt(3);
          }
          this.draw_polygon(6, center_x + offset, center_y);
        }
      }
      return this.context.stroke();
    };

    return Grid;

  })();

  CharacterSheet = (function() {
    function CharacterSheet(cols_for_char_tbl) {
      this.cols_for_char_tbl = cols_for_char_tbl;
      this.listen_events = bind(this.listen_events, this);
      this.do_ws_binds = bind(this.do_ws_binds, this);
      this.character_disconnected = bind(this.character_disconnected, this);
      this.character_joined = bind(this.character_joined, this);
      this.render_skills_table = bind(this.render_skills_table, this);
      this.$elem = $('#js-characters-sheet');
      this.render_skills_table();
      this.do_ws_binds();
      this.listen_events();
    }

    CharacterSheet.prototype.render_skills_table = function() {
      var data, html;
      data = {
        'characters': board.SESSION_GLOBALS.CHARACTERS,
        'cols_for_char_tbl': this.cols_for_char_tbl,
        'skills': board.SESSION_GLOBALS.SKILLS,
        'the_player': board.SESSION_GLOBALS.THE_PLAYER,
        'master': board.SESSION_GLOBALS.MASTER
      };
      html = board.ECT.render('/static/js/templates/play/characters_sheet.ect', data);
      this.$elem.html(html);
      (board.SESSION_GLOBALS.THE_PLAYER != null) && board.SESSION_GLOBALS.THE_PLAYER.do_sheet_binds();
      return (board.SESSION_GLOBALS.MASTER != null) && board.SESSION_GLOBALS.MASTER.do_sheet_binds();
    };

    CharacterSheet.prototype.character_joined = function(character_id) {
      return this.render_skills_table();
    };

    CharacterSheet.prototype.character_disconnected = function(character_id) {
      var $elem;
      $elem = $("#js-characters-sheet-character-row-" + character_id);
      return ($elem != null) && $elem.addClass('half-opaque');
    };

    CharacterSheet.prototype.do_ws_binds = function() {
      var update_character, update_characters;
      update_characters = (function(_this) {
        return function(params) {
          var char_id, character, character_data, ref, results;
          ref = params.characters;
          results = [];
          for (char_id in ref) {
            character_data = ref[char_id];
            character = board.SESSION_GLOBALS.CHARACTERS[character_data.id];
            character.update_params(character_data);
            if ((board.SESSION_GLOBALS.THE_PLAYER != null) && character === board.SESSION_GLOBALS.THE_PLAYER) {
              results.push(board.SESSION_GLOBALS.THE_PLAYER.update_params(character_data));
            } else {
              results.push(void 0);
            }
          }
          return results;
        };
      })(this);
      board.SESSION_GLOBALS.WSCLIENT.register_action('CharactersXpChanged', (function(_this) {
        return function(params) {
          update_characters(params);
          return _this.render_skills_table();
        };
      })(this));
      update_character = (function(_this) {
        return function(params) {
          var character;
          character = board.SESSION_GLOBALS.CHARACTERS[params.character_id];
          character.update_params(params);
          if ((board.SESSION_GLOBALS.THE_PLAYER != null) && character === board.SESSION_GLOBALS.THE_PLAYER) {
            board.SESSION_GLOBALS.THE_PLAYER.update_params(params);
          }
          return _this.render_skills_table();
        };
      })(this);
      board.SESSION_GLOBALS.WSCLIENT.register_action('AfterCharacterPutItemOn', update_character);
      board.SESSION_GLOBALS.WSCLIENT.register_action('AfterCharacterTookItemOff', update_character);
      return board.SESSION_GLOBALS.WSCLIENT.register_action('AfterCharacterChangeSkills', (function(_this) {
        return function(params) {
          var character;
          character = board.SESSION_GLOBALS.CHARACTERS[params.character_id];
          character.skills = params.skills;
          character.skill_points = params.skill_points;
          if ((board.SESSION_GLOBALS.THE_PLAYER != null) && character === board.SESSION_GLOBALS.THE_PLAYER) {
            board.SESSION_GLOBALS.THE_PLAYER.skills = params.skills;
            board.SESSION_GLOBALS.THE_PLAYER.skill_points = params.skill_points;
          }
          return _this.render_skills_table();
        };
      })(this));
    };

    CharacterSheet.prototype.listen_events = function() {
      return board.EventDispatcher.listen('received_online_players', (function(_this) {
        return function(e) {
          return _this.render_skills_table();
        };
      })(this));
    };

    return CharacterSheet;

  })();

}).call(this);

//# sourceMappingURL=play.js.map
