// Generated by CoffeeScript 1.9.1
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.normalize_form_parameters = function(arr) {
    var i, j, len, r;
    r = {};
    for (j = 0, len = arr.length; j < len; j++) {
      i = arr[j];
      r[i.name] = i.value;
    }
    return r;
  };

  window.RulesPage = (function() {
    function RulesPage(rules_id, skills_categories, skills1) {
      var f, j, k, len, len1, ref, ref1, ref2, s, s_id, x;
      this.rules_id = rules_id;
      this.skills_categories = skills_categories;
      this.skills = skills1;
      this.add_xp_rows = bind(this.add_xp_rows, this);
      this.add_xp_column = bind(this.add_xp_column, this);
      this.delete_skill_row = bind(this.delete_skill_row, this);
      this.add_skill_to_obj = bind(this.add_skill_to_obj, this);
      this._character_levels_clb = bind(this._character_levels_clb, this);
      this._add_item_clb = bind(this._add_item_clb, this);
      this._add_items_group_clb = bind(this._add_items_group_clb, this);
      this._add_class_clb = bind(this._add_class_clb, this);
      this._add_race_clb = bind(this._add_race_clb, this);
      this._add_skill_clb = bind(this._add_skill_clb, this);
      this._add_skills_category_clb = bind(this._add_skills_category_clb, this);
      this._edit_main_clb = bind(this._edit_main_clb, this);
      this._create_rules_clb = bind(this._create_rules_clb, this);
      this.change_item_group_attr = bind(this.change_item_group_attr, this);
      this.change_status = bind(this.change_status, this);
      this.do_binds = bind(this.do_binds, this);
      this.process_errors = bind(this.process_errors, this);
      this.toggle_form = bind(this.toggle_form, this);
      this.get_counter = bind(this.get_counter, this);
      this._counters = {};
      this.renderer = ECT({
        root: '/static/js/templates/rules'
      });
      this.forms = {
        rules: {
          main: ".js-rules-form"
        },
        skills: {
          main: ".js-skill-forms"
        },
        races: {
          main: ".js-race-form"
        },
        classes: {
          main: ".js-class-form"
        },
        items: {
          main: ".js-item-form"
        }
      };
      this.templates = {
        skills_category: 'skills_category.ect',
        skill: 'skill.ect',
        race: 'race.ect',
        skill_select: 'skills_select.ect',
        character_class: 'character_class.ect',
        items_group: 'items_group.ect',
        item: 'item.ect',
        xp: 'character_level_row.ect'
      };
      this.forms_clb = {
        "add_rules": this._create_rules_clb,
        "edit_main": this._edit_main_clb,
        "add_skills_category": this._add_skills_category_clb,
        "add_skill": this._add_skill_clb,
        "add_race": this._add_race_clb,
        "add_class": this._add_class_clb,
        "add_items_group": this._add_items_group_clb,
        "add_item": this._add_item_clb,
        "character_levels": this._character_levels_clb
      };
      this.formula_controls = [];
      ref = $(".js-level-formula-field");
      for (j = 0, len = ref.length; j < len; j++) {
        x = ref[j];
        this.formula_controls.push(new board.FormulaEditor(x.id));
      }
      ref1 = this.skills;
      for (s_id in ref1) {
        s = ref1[s_id];
        ref2 = this.formula_controls;
        for (k = 0, len1 = ref2.length; k < len1; k++) {
          f = ref2[k];
          f.add_keyword(s.title);
        }
      }
      this.do_binds();
    }

    RulesPage.prototype.get_counter = function(entity) {
      if (this.counters == null) {
        this._counters[entity] = 0;
      } else {
        this._counters[entity] += 1;
      }
      return this._counters[entity];
    };

    RulesPage.prototype.toggle_form = function(el) {
      var $el, state;
      $el = $(el);
      state = $el.attr('data-state');
      if (state === 'close') {
        $el.text($el.attr('data-opened-text'));
        $el.attr('data-state', 'open');
      } else {
        $el.text($el.attr('data-closed-text'));
        $el.attr('data-state', 'close');
      }
      return $(this.forms[$el.attr('data-target')].main).slideToggle();
    };

    RulesPage.prototype.process_errors = function(form, errors_dict) {
      var field, field_name, results;
      results = [];
      for (field in errors_dict) {
        field_name = field.replace(/-/g, '__');
        results.push($(form[field_name]).addClass('has-error'));
      }
      return results;
    };

    RulesPage.prototype.do_binds = function() {
      $('#js-finalize-btn').bind('click', (function(_this) {
        return function(e) {
          var msg;
          msg = 'Are you sure? After finalization you will not be able to edit the rules!';
          if (confirm(msg)) {
            return window.location = "/rules/finalize/" + _this.rules_id;
          }
        };
      })(this));
      return $("form[data-submit_type='ajax']").bind('submit', (function(_this) {
        return function(evt) {
          var $form, form, form_data, reset_on_success, url;
          evt.preventDefault();
          form = $(evt.currentTarget)[0];
          $form = $(form);
          url = form.action;
          reset_on_success = $form.attr('data-reset-on-success');
          form_data = $form.serialize();
          if (_this.rules_id != null) {
            form_data += "&rules_id=" + _this.rules_id;
          }
          return $.ajax({
            type: 'POST',
            url: url,
            data: form_data,
            success: function(response, textStatus, jqXHR) {
              var clb;
              if (response.success) {
                clb = _this.forms_clb[form.name];
                if (clb) {
                  clb(response.result);
                }
                if (reset_on_success === 'true') {
                  return form.reset();
                }
              } else if (response.errors) {
                return _this.process_errors(form, response.errors);
              }
            },
            error: function(jqXHR, textStatus, errorThrown) {
              var response;
              response = jqXHR.responseJSON;
              if (jqXHR.status === 422) {
                return _this.process_errors(form, response.errors);
              }
            }
          });
        };
      })(this));
    };

    RulesPage.prototype.change_status = function(el) {
      var $btn, $parent, child_id, child_type, is_disabled;
      $btn = $(el);
      $parent = $btn.parent().parent();
      child_id = $parent.attr('data-child_id');
      child_type = $parent.attr('data-child_type');
      is_disabled = parseInt($parent.attr('data-is_disabled'));
      return $.ajax({
        type: 'POST',
        url: '/api/rules/child/change_status/',
        data: {
          id: child_id,
          disable: !is_disabled,
          child_type: child_type
        },
        success: (function(_this) {
          return function(data, textStatus, jqXHR) {
            var $title, id, ref, results, skill;
            if (data.success) {
              $title = $parent.find('.js-child-title');
              if (is_disabled === 0) {
                $parent.attr('data-is_disabled', '1');
                $btn.html('Enable');
                $btn.toggleClass('btn-blue');
                $btn.toggleClass('btn-red');
                $title.addClass('child-title-disabled');
              } else {
                $parent.attr('data-is_disabled', '0');
                $btn.html('Disable');
                $btn.toggleClass('btn-blue');
                $btn.toggleClass('btn-red');
                $title.removeClass('child-title-disabled');
              }
              if (child_type === 'skill') {
                ref = _this.skills;
                results = [];
                for (id in ref) {
                  skill = ref[id];
                  if (id === child_id) {
                    skill.is_disabled = !is_disabled;
                    break;
                  } else {
                    results.push(void 0);
                  }
                }
                return results;
              }
            }
          };
        })(this),
        error: function(jqXHR, textStatus, errorThrown) {
          return console.log('error', textStatus);
        }
      });
    };

    RulesPage.prototype.change_item_group_attr = function(el) {
      var $btn, attr_name, item_group_id;
      $btn = $(el);
      item_group_id = $btn.data('itemGroupId');
      attr_name = $btn.data('attrName');
      $.post('/api/rules/item_group/toggle_attribute', {
        rules_id: this.rules_id,
        item_group: item_group_id,
        attr_name: attr_name
      }, (function(response) {
        if (response.success) {
          return $btn.toggleClass('btn-grey btn-green');
        }
      }));
      return 'json';
    };

    RulesPage.prototype._create_rules_clb = function(rules) {
      return window.location = "/rules/edit/" + rules.id;
    };

    RulesPage.prototype._edit_main_clb = function(result) {
      return console.log("ok");
    };

    RulesPage.prototype._add_skills_category_clb = function(s_category) {
      var new_category;
      $('#category').append("<option value='" + s_category.id + "'>" + s_category.title + "</option>");
      new_category = this.renderer.render(this.templates.skills_category, {
        skills_category: s_category
      });
      $(new_category).insertBefore($("tr.skills-category[data-skills_category_id='none']"));
      this.skills_categories.push(s_category);
      return this.add_xp_column(s_category);
    };

    RulesPage.prototype._add_skill_clb = function(skill) {
      var all_skills_selector, amount_skills, f, j, last_skill, len, ref, results;
      this.skills[skill.id] = skill;
      if (skill.category_id === null) {
        skill.category_id = 'none';
      }
      all_skills_selector = "tr.skill[data-skills_category_id='" + skill.category_id + "']";
      amount_skills = $(all_skills_selector).length;
      if (amount_skills) {
        last_skill = $(all_skills_selector).last();
        $(this.renderer.render(this.templates.skill, {
          skill: skill
        })).insertAfter(last_skill);
      } else {
        $("tr.category-no-skills[data-skills_category_id='" + skill.category_id + "']").remove();
        $(this.renderer.render(this.templates.skill, {
          skill: skill
        })).insertAfter($("tr.skills-category[data-skills_category_id='" + skill.category_id + "']"));
      }
      ref = this.formula_controls;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        f = ref[j];
        results.push(f.add_keyword(skill.title));
      }
      return results;
    };

    RulesPage.prototype._add_race_clb = function(race) {
      var amount_races, content, ref, skill, skills, value;
      amount_races = $("tr[data-child_type='race']").length;
      skills = [];
      ref = race.skills;
      for (skill in ref) {
        value = ref[skill];
        skills.push(this.skills[skill].title + ": " + (board.numeric_with_sign(value)));
      }
      content = this.renderer.render(this.templates.race, {
        race_counter: amount_races + 1,
        race: race,
        skills: skills.join(', ') || 'NO SKILL BONUS'
      });
      $(".races-table").append(content);
      return $(".js-race-skills").empty();
    };

    RulesPage.prototype._add_class_clb = function(character_class) {
      var amount_character_classes, content, ref, skill, skills, value;
      amount_character_classes = $("tr[data-child_type='character_class']").length;
      skills = [];
      ref = character_class.skills;
      for (skill in ref) {
        value = ref[skill];
        skills.push(this.skills[skill].title + ": " + (board.numeric_with_sign(value)));
      }
      content = this.renderer.render(this.templates.character_class, {
        character_class_counter: amount_character_classes + 1,
        character_class: character_class,
        skills: skills.join(', ') || 'NO SKILL BONUS'
      });
      $(".character-classes-table").append(content);
      return $(".js-character-class-skills").empty();
    };

    RulesPage.prototype._add_items_group_clb = function(items_group) {
      var new_items_group;
      $("form[name=add_item] select[name=group_id]").append("<option value='" + items_group.id + "'>" + items_group.title + "</option>");
      new_items_group = this.renderer.render(this.templates.items_group, {
        ig: items_group
      });
      return $("#items_table").append(new_items_group);
    };

    RulesPage.prototype._add_item_clb = function(item) {
      var all_item_selector, amount_items, content, last_item_in_group, ref, skill, skills, value;
      all_item_selector = "tr[data-items_group_id=" + item.group_id + "][data-child_type=item]";
      amount_items = $(all_item_selector).length;
      last_item_in_group = $(all_item_selector).last();
      skills = [];
      ref = item.skills;
      for (skill in ref) {
        value = ref[skill];
        skills.push(this.skills[skill].title + ": " + (board.numeric_with_sign(value)));
      }
      content = this.renderer.render(this.templates.item, {
        number: amount_items + 1,
        'item': item,
        'skills': skills.join(', ') || 'NO SKILL BONUS'
      });
      if (amount_items) {
        $(content).insertAfter($(last_item_in_group));
      } else {
        $(content).insertAfter($("tr[data-item_group_id=" + item.group_id + "][data-child_type=items_group]"));
      }
      return $(".js-item-skills").empty();
    };

    RulesPage.prototype._character_levels_clb = function(levels) {
      return console.log(levels);
    };

    RulesPage.prototype.add_skill_to_obj = function(entity, el) {
      var $target, cnt, content, skills;
      $target = $($(el).attr('data-target'));
      skills = this.skills;
      cnt = this.get_counter(entity);
      content = this.renderer.render(this.templates.skill_select, {
        skills: skills,
        counter: cnt
      });
      return $target.append(content);
    };

    RulesPage.prototype.delete_skill_row = function(el) {
      return $(el).closest('.row').remove();
    };

    RulesPage.prototype.add_xp_column = function(s_category) {
      var _this;
      $("#character-levels-table tr.js-head").append("<th>Granted skills formula (" + s_category.title + ")</th>");
      _this = this;
      return $("#character-levels-table tr.js-level-row").each(function(i) {
        var f, formula_field_id, ref, s, s_id;
        formula_field_id = i + "_" + s_category.id;
        $(this).append("<td> <input type='hidden' name='skills_categories_formulas-" + i + "-category_id' value='" + s_category.id + "'> <input type='hidden' name='skills_categories_formulas-" + i + "-level' value='" + (i + 1) + "'> <input id='" + formula_field_id + "' class='js-level-formula-field' name='skills_categories_formulas-" + i + "-formula' type='text' value='0' /> </td>");
        f = new board.FormulaEditor(formula_field_id);
        ref = this.skills;
        for (s_id in ref) {
          s = ref[s_id];
          f.add_keyword(s.title);
        }
        return _this.formula_controls.push(f);
      });
    };

    RulesPage.prototype.add_xp_rows = function() {
      var $level_rows, f, j, level_rows, new_level_rows_amount, ref, results, s, s_id, x;
      level_rows = $("#character-levels-table tr.js-level-row");
      $level_rows = $(level_rows);
      new_level_rows_amount = parseInt($("#level-rows-to-add").val());
      results = [];
      for (x = j = 1, ref = new_level_rows_amount + 1; 1 <= ref ? j < ref : j > ref; x = 1 <= ref ? ++j : --j) {
        $("#character-levels-table").append(this.renderer.render(this.templates.xp, {
          skills_categories: this.skills_categories,
          level: $level_rows.length + x,
          rules_id: this.rules_id
        }));
        results.push((function() {
          var k, len, ref1, ref2, results1;
          ref1 = $("tr[data-level=" + ($level_rows.length + x) + "] .js-level-formula-field");
          results1 = [];
          for (k = 0, len = ref1.length; k < len; k++) {
            x = ref1[k];
            f = new board.FormulaEditor(x.id);
            ref2 = this.skills;
            for (s_id in ref2) {
              s = ref2[s_id];
              f.add_keyword(s.title);
            }
            results1.push(this.formula_controls.push(f));
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    return RulesPage;

  })();

}).call(this);

//# sourceMappingURL=rules_new.js.map
